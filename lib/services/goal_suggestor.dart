import 'dart:math';

/// –ü—Ä–æ—Å—Ç—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞: –Ω–∞ –æ—Å–Ω–æ–≤—ã –æ—Ç–≤–µ—Ç–æ–≤ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã.
/// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (title + optional firstStep + tags).
class GoalSuggestion {
  final String title;
  final String? firstStep;
  final List<String> tags;

  GoalSuggestion(this.title, {this.firstStep, this.tags = const []});
}

class GoalSuggestor {
  static List<GoalSuggestion> suggest({
    required String? fearChoice, // Q1
    required Set<String> inspirations, // Q2
    Set<String>? energy, // (–¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ)
    required String? mood, // Q3
  }) {
    final rnd = Random();
    final List<GoalSuggestion> out = [];

    // 1) –ü–æ —Å—Ç—Ä–∞—Ö—É/–Ω–∞–º–µ—Ä–µ–Ω–∏—é (Q1)
    if ((fearChoice ?? '').contains('—Ç–µ—Å—Ç')) {
      out.add(
        GoalSuggestion(
          '–ü—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç',
          firstStep: '–í—ã–±—Ä–∞—Ç—å —Ç–µ—Å—Ç (15‚Äì20 –º–∏–Ω) –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è',
          tags: ['—Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ', '–≤—ã–±–æ—Ä –ø—É—Ç–∏'],
        ),
      );
    }
    if ((fearChoice ?? '').contains('—Å–º–µ–Ω–∏–ª–∞ —Å—Ñ–µ—Ä—É')) {
      out.add(
        GoalSuggestion(
          '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
          firstStep: '–ù–∞–π—Ç–∏ 3 –≤–∞–∫–∞–Ω—Å–∏–∏/–∫—É—Ä—Å–∞ –∏ –≤—ã–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è',
          tags: ['–∫–∞—Ä—å–µ—Ä–∞', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ'],
        ),
      );
    }
    if ((fearChoice ?? '').contains('–æ—Ç–¥–æ—Ö–Ω—É—Ç—å')) {
      out.add(
        GoalSuggestion(
          '–°–¥–µ–ª–∞—Ç—å –ø–ª–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è',
          firstStep: '–í—ã–±—Ä–∞—Ç—å 1 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ',
          tags: ['–±–∞–ª–∞–Ω—Å', '–∑–¥–æ—Ä–æ–≤—å–µ'],
        ),
      );
    }

    // 2) –ü–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (Q2)
    if (inspirations.contains('–ü—Ä–∏—Ä–æ–¥–∞')) {
      out.add(
        GoalSuggestion(
          '–ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ',
          firstStep: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É –≤ –ø–∞—Ä–∫–µ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö',
          tags: ['–ø—Ä–∏—Ä–æ–¥–∞', '—ç–Ω–µ—Ä–≥–∏—è'],
        ),
      );
    }
    if (inspirations.contains('–ò—Å–∫—É—Å—Å—Ç–≤–æ')) {
      out.add(
        GoalSuggestion(
          '–ü—Ä–æ–∫–∞—á–∞—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫—É—é —Ä—É—Ç–∏–Ω—É',
          firstStep: '15 –º–∏–Ω—É—Ç —Å–∫–µ—Ç—á/–º—É–∑—ã–∫–∏/—Ñ–æ—Ç–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
          tags: ['—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ'],
        ),
      );
    }
    if (inspirations.contains('–õ—é–¥–∏')) {
      out.add(
        GoalSuggestion(
          '–†–∞—Å—à–∏—Ä—è—Ç—å —Ç—ë–ø–ª—ã–π –∫—Ä—É–≥ –æ–±—â–µ–Ω–∏—è',
          firstStep: '–ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É/–∑–≤–æ–Ω–æ–∫ –æ–¥–Ω–æ–º—É –±–ª–∏–∑–∫–æ–º—É',
          tags: ['–æ—Ç–Ω–æ—à–µ–Ω–∏—è'],
        ),
      );
    }
    if (inspirations.contains('–ú—É–∑—ã–∫–∞')) {
      out.add(
        GoalSuggestion(
          '–í–µ—Ä–Ω—É—Ç—å –º—É–∑—ã–∫—É –≤ –¥–µ–Ω—å',
          firstStep: '–°–æ–±—Ä–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç ¬´—ç–Ω–µ—Ä–≥–∏—è¬ª –Ω–∞ –Ω–µ–¥–µ–ª—é',
          tags: ['—Ä–∞–¥–æ—Å—Ç—å'],
        ),
      );
    }
    if (inspirations.contains('–î–µ–Ω—å–≥–∏')) {
      out.add(
        GoalSuggestion(
          '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ 1%',
          firstStep: '–û—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å 1% –¥–æ—Ö–æ–¥–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á—ë—Ç',
          tags: ['–¥–µ–Ω—å–≥–∏', '–ø—Ä–∏–≤—ã—á–∫–∏'],
        ),
      );
    }
    if (inspirations.contains('–≠–º–æ—Ü–∏–∏')) {
      out.add(
        GoalSuggestion(
          '–î–Ω–µ–≤–Ω–∏–∫ —ç–º–æ—Ü–∏–π 5 –º–∏–Ω—É—Ç',
          firstStep: '–í–µ—á–µ—Ä–æ–º –∑–∞–ø–∏—Å–∞—Ç—å 3 —ç–º–æ—Ü–∏–∏ –∏ –∏—Ö –ø—Ä–∏—á–∏–Ω—ã',
          tags: ['–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å'],
        ),
      );
    }
    if (inspirations.contains('–ü–æ–º–æ—â—å –¥—Ä—É–≥–∏–º')) {
      out.add(
        GoalSuggestion(
          '–î–æ–±—Ä–æ–µ –¥–µ–ª–æ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é',
          firstStep: '–í—ã–±—Ä–∞—Ç—å –º–∏–Ω–∏-–≤–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ / –ø–æ–º–æ—â—å –±–ª–∏–∑–∫–∏–º',
          tags: ['—Å–º—ã—Å–ª', '—Å–æ–æ–±—â–µ—Å—Ç–≤–æ'],
        ),
      );
    }
    if (inspirations.contains('–ö—Ä–∞—Å–æ—Ç–∞')) {
      out.add(
        GoalSuggestion(
          '–ú–∏–∫—Ä–æ-—ç—Å—Ç–µ—Ç–∏–∫–∞ –¥–Ω—è',
          firstStep: '–ù–∞–π—Ç–∏ –∏ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å ¬´–∫—Ä–∞—Å–æ—Ç—É –¥–Ω—è¬ª',
          tags: ['–≤–∫—É—Å –∫ –∂–∏–∑–Ω–∏'],
        ),
      );
    }

    // 3) –ü–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é (Q3)
    switch (mood) {
      case 'üòî –ü–ª–æ—Ö–æ':
        out.add(
          GoalSuggestion(
            '–†–∏—Ç—É–∞–ª –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ',
            firstStep: '–°–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ 5 –ø—Ä–æ—Å—Ç—ã—Ö —à—Ç—É–∫ ¬´–º–Ω–µ –ª—É—á—à–µ¬ª',
            tags: ['–ø–æ–¥–¥–µ—Ä–∂–∫–∞'],
          ),
        );
        break;
      case 'üôÇ –ù–æ—Ä–º–∞–ª—å–Ω–æ':
        out.add(
          GoalSuggestion(
            '1 –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –∫ —Ü–µ–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ',
            firstStep: '–í—ã–±—Ä–∞—Ç—å –º–∏–Ω–∏-–∑–∞–¥–∞—á—É –Ω–∞ 10 –º–∏–Ω—É—Ç',
            tags: ['–ø—Ä–∏–≤—ã—á–∫–∞', '–¥–≤–∏–∂–µ–Ω–∏–µ'],
          ),
        );
        break;
      case 'üòÉ –û—Ç–ª–∏—á–Ω–æ':
        out.add(
          GoalSuggestion(
            '–®–∞–≥–∞–µ–º —Å–º–µ–ª–µ–µ',
            firstStep: '–í—ã–±—Ä–∞—Ç—å ¬´—Å–∞–º—ã–π –ø–æ–ª–µ–∑–Ω—ã–π –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç¬ª –Ω–∞ –Ω–µ–¥–µ–ª–µ',
            tags: ['—Ä–æ—Å—Ç'],
          ),
        );
        break;
    }

    // –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—É—Å—Ç–æ ‚Äî –±–∞–∑–æ–≤—ã–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏
    if (out.isEmpty) {
      out.addAll([
        GoalSuggestion(
          '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å 1 –±–ª–∏–∂–∞–π—à—É—é —Ü–µ–ª—å –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏',
          firstStep: '–ó–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ 3 —à–∞–≥–∞',
          tags: ['—Ñ–æ–∫—É—Å'],
        ),
        GoalSuggestion(
          '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π ¬´—à–∞–≥ 10 –º–∏–Ω—É—Ç¬ª',
          firstStep: '–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
          tags: ['–ø—Ä–∏–≤—ã—á–∫–∞'],
        ),
      ]);
    }

    // –ü–µ—Ä–µ–º–µ—à–∞–µ–º —Å–ª–µ–≥–∫–∞
    out.shuffle(rnd);
    // –í–µ—Ä–Ω—ë–º –¥–æ 6 —à—Ç—É–∫
    return out.take(6).toList();
  }
}
